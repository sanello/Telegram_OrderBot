// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const path = require('path');
const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const jwt = require('jsonwebtoken');
const url = require('url');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SOCKET_PATH = process.env.SOCKET;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const JWT_SECRET = process.env.JWT_SECRET;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è SOCKET
if (!SOCKET_PATH) {
  console.error('–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SOCKET –Ω–µ –∑–∞–¥–∞–Ω–∞');
  process.exit(1);
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–∫–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (fs.existsSync(SOCKET_PATH)) {
  fs.unlinkSync(SOCKET_PATH);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –∏ WebSocket
const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ noServer: true });

// –°–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ WebSocket
const clients = new Set();

// –ö–µ—à —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞
const productCache = new Map();
// –ö–µ—à –∑–∞–∫–∞–∑–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É
const orderCache = new Map();

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

const crypto = require('crypto');

function parseInitData(initDataString) {
  const params = new URLSearchParams(initDataString);
  const userStr = params.get('user');
  if (!userStr) return null;

  try {
    const user = JSON.parse(decodeURIComponent(userStr));
    return user;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user –∏–∑ initData:', e);
    return null;
  }
}

function validateInitData(initDataRaw) {

  const secretKey = crypto
    .createHmac('sha256', 'WebAppData')
    .update(TELEGRAM_BOT_TOKEN)
    .digest();

  const urlParams = new URLSearchParams(initDataRaw);
  const receivedHash = urlParams.get('hash');
  urlParams.delete('hash');

  const entries = [...urlParams.entries()];

  const dataCheckString = entries
    .map(([key, value]) => `${key}=${value}`)
    .sort()
    .join('\n');

  const computedHash = crypto
    .createHmac('sha256', secretKey)
    .update(dataCheckString)
    .digest('hex');

  const isValid = computedHash === receivedHash;
  console.log(isValid ? '‚úîÔ∏è –ü–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞' : '‚ùå –ü–æ–¥–ø–∏—Å—å –ù–ï–í–ï–†–ù–ê');

  return isValid;
}


/**
 * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
 */
function cacheProduct(productCode, data) {
  if (productCache.has(productCode)) {
    clearTimeout(productCache.get(productCode).timeout);
  }

  const timeout = setTimeout(() => {
    productCache.delete(productCode);
    console.log(`–ö–µ—à –æ—á–∏—â–µ–Ω: ${productCode}`);
  }, 15 * 1000);

  productCache.set(productCode, { data, timeout });
}

/**
 * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
 */

function cacheOrder(orderNumber, items) {
  if (orderCache.has(orderNumber)) {
    clearTimeout(orderCache.get(orderNumber).timeout);
  }

  const timeout = setTimeout(() => {
    orderCache.delete(orderNumber);
    console.log(`–ö–µ—à –∑–∞–∫–∞–∑–∞ —É–¥–∞–ª—ë–Ω: ${orderNumber}`);
  }, 180 * 60 * 1000); // 3 —á–∞—Å–∞

  orderCache.set(orderNumber, { data: items, timeout });
}


/**
 * –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É WebSocket –∫–ª–∏–µ–Ω—Ç—É –ø–æ chatId
 */
function broadcastToClients(data) {
  let targetChatId = null;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å initData - –ø–∞—Ä—Å–∏–º –∏ –≤—ã–≤–æ–¥–∏–º user id
  if (data.initData) {
    const user = parseInitData(data.initData);
    if (user && user.id) {
      console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData:', user.id);
      data.chatId = user.id;  // –¥–æ–±–∞–≤–ª—è–µ–º –≤ JSON –ø–æ–ª–µ chat
      targetChatId = String(user.id);
    } else {
      console.log('initData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }
  
   if (!targetChatId) {
    console.warn('targetChatId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return;
  }
  
  const message = JSON.stringify(data);

  for (const client of clients) {
    if (
      client.readyState === WebSocket.OPEN &&
      String(client.user?.user_id) === targetChatId
    ) {
      client.send(message);
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
wss.on('connection', (ws) => {
  console.log(`–ü–æ–¥–∫–ª—é—á—ë–Ω –∫–ª–∏–µ–Ω—Ç: ${ws.user?.user_id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}`);
  clients.add(ws);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  ws.send(JSON.stringify({
    chatId: ws.user?.user_id,
    type: 'info',
    message: 'WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
  }));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  ws.on('message', async (msg) => {
    try {
      const data = JSON.parse(msg);
      if (typeof data !== 'object') throw new Error();

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ "ostatki" ‚Äî –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
      if (data.type === 'ostatki' && data.data?.productCode) {
        cacheProduct(data.data.productCode, data);
        console.log(`–ö–µ—à–∏—Ä–æ–≤–∞–Ω —Ç–æ–≤–∞—Ä: ${data.data.productCode}`);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ "ordernumber" ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram
      if (data.type === 'ordernumber' && data.data?.order_summary && data.chatId) {
          
        if (data.data?.number && Array.isArray(data.data.items)) {
            //orderCache.set(data.data.number, data.data.items);
            orderCache.set(data.data.number, { data: data.data.items });
            console.log(`–ö–µ—à–∏—Ä–æ–≤–∞–Ω –∑–∞–∫–∞–∑: ${data.data.number}`);
        }
        await sendTelegramOrderMessage(data.chatId, data.data.number, data.data.order_summary);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ "deleteordernumber"
      if (data.type === 'deleteordernumber' && data.data?.number && data.chatId) {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${data.data.number} –¥–ª—è chatId: ${data.chatId}`);
        await sendTelegramDeleteMessage(data.chatId, data.data.number);
      }

      ws.send(JSON.stringify({ type: 'success', message: '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã' }));
    } catch {
      ws.send(JSON.stringify({ type: 'error', message: '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON' }));
    }
  });

  ws.on('close', () => {
    console.log('WebSocket-–∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
    clients.delete(ws);
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on("polling_error", (err) =>
  console.error("Polling error:", err?.response?.body || err.message)
);

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function generateToken(userId) {
  return jwt.sign({
    user_id: userId,
    exp: Math.floor(Date.now() / 1000) + (3650 * 24 * 60 * 60), // 10 –ª–µ—Ç
  }, JWT_SECRET, { algorithm: 'HS256' });
}

/**
 * –ß—Ç–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö chat ID –∏–∑ —Ñ–∞–π–ª–∞
 */
function getAllowedChatIds() {
  const data = fs.readFileSync('allowedChatIds.txt', 'utf-8');
  return new Set(data.split('\n').map(l => l.split(' ')[0].trim()).filter(Boolean));
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö chat ID
const allowedChatIds = getAllowedChatIds();

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç chat ID –∏ JWT —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ ID —Ä–∞–∑—Ä–µ—à—ë–Ω
 */
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const token = generateToken(userId);

  const welcomeMessage = allowedChatIds.has(String(chatId))
    ? ` 
–ü—Ä–∏–≤–µ—Ç! üôã‚Äç‚ôÇÔ∏è –≠—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π Telegram-–±–æ—Ç.

üõ† –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å Telegram API, —Å–¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–µ–µ:

1. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ [my.telegram.org](https://my.telegram.org/)
2. –í–æ–π–¥–∏ –ø–æ–¥ —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º
3. –°–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:

- **API ID** ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- **API Hash** ‚Äî —Ö–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

üîê –¢–≤–æ–π **chat ID**: 
\`
${chatId}
\`
üîë –¢–≤–æ–π **JWT Token** (–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –ª–µ—Ç):
\`\`\`
${token}
\`\`\`
–î–æ–±–∞–≤—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥ —Å–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (config.env). 
–£–¥–∞—á–∏! üöÄ
`

        /**
        * –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
        */
        
        : `‚ùå –í–∞—à chat ID \`${chatId}\` –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ—Å—Ç–∏ chatId –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
if (allowedChatIds.has(String(chatId))) {
  bot.sendMessage(chatId, welcomeMessage, {
    parse_mode: 'Markdown',
    reply_markup: {
        inline_keyboard: [
            [
                {
                    text: 'üîë my.telegram.org',
                    web_app: {
                        url: `https://my.telegram.org/`
                    }
                }
            ]
        ]
    }

  });
} else {
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
}
  
});

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –≤ Telegram
 */
async function sendTelegramOrderMessage(chatId, orderNumber, order_summary) {
  const now = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Chisinau' });
  const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  try {
    const res = await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: `${now}: ${order_summary}`,
        reply_markup: {
            inline_keyboard: [[
                {
                text: '‚ûï–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π',
                web_app: {
                    url: `https://order.warflame.net`
                }
                },
                {
                text: '‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                web_app: {
                    url: `https://order.warflame.net/?orderNumber=${orderNumber}`
                }
                }
            ]]
            }
      })
    });

    const json = await res.json();
    if (!json.ok) throw new Error(JSON.stringify(json));
    console.log(`–ó–∞–∫–∞–∑ ${orderNumber} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${chatId}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ Telegram API:', err.message || err);
  }
}

async function sendTelegramDeleteMessage(chatId, orderNumber) {
    
    if (!orderNumber) {
        console.error('–ó–∞–∫–∞–∑ –Ω–µ –∏–º–µ–µ—Ç –Ω–æ–º–µ—Ä–∞.');
        return;
    }
    
  const now = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Chisinau' });
  const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

  try {
    const res = await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: `${now}: –ó–∞–∫–∞–∑ ${orderNumber} —É–¥–∞–ª—ë–Ω!`,
        reply_markup: {
            inline_keyboard: [[
                {
                text: '‚ûï–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π',
                web_app: {
                    url: `https://order.warflame.net`
                }
                },
                {
                text: '‚úèÔ∏è–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                web_app: {
                    url: `https://order.warflame.net/?orderNumber=${orderNumber}`
                }
                }
            ]]
            }
      })
    });

    console.log(`–ó–∞–∫–∞–∑ ${orderNumber} —É–¥–∞–ª—ë–Ω ${chatId}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ Telegram API:', err.message || err);
  }
}

// ==== Express Middleware –∏ –º–∞—Ä—à—Ä—É—Ç—ã ====
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

/**
 * POST /order
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º
 */
app.post('/order', (req, res) => {
  const initData = req.body.initData;
  
  console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /order:', req.body);

  if (!initData) {
    return res.status(400).send('initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }

  try {
    const data = validateInitData(initData);
    
    // –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–∫–∞–∑ WebSocket-–∫–ª–∏–µ–Ω—Ç–∞–º
    broadcastToClients(req.body);

    res.status(200).send('–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç–∞–º');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ initData:', err.message);
    res.status(403).send('–ù–µ–≤–µ—Ä–Ω—ã–π initData');
  }
});

/**
 * GET /product-details
 * –û—Ç–¥–∞—ë—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∫–æ–¥—É
 */
app.get('/product-details', (req, res) => {
  const cached = productCache.get(req.query.productCode);
  cached ? res.json(cached.data) : res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

/**
 * GET /order-items
 * –û—Ç–¥–∞—ë—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
 * –ü—Ä–∏–º–µ—Ä: /order-items?orderNumber=144786
 */
app.get('/order-items', (req, res) => {
  console.log('–¢–µ–∫—É—â–∏–π –∫—ç—à:', [...orderCache.entries()]);
  const order = orderCache.get(req.query.orderNumber);
  order ? res.json(order.data) : res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (_, res) =>
  res.sendFile(path.join(__dirname, 'public', 'index.html'))
);

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–æ WebSocket —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ JWT
 */
server.on('upgrade', (req, socket, head) => {
  const parsedUrl = url.parse(req.url, true);

  if (parsedUrl.pathname !== '/ws/') return socket.destroy();

  const token = parsedUrl.query?.token;
  if (!token) {
    socket.write('HTTP/1.1 401 Unauthorized\r\n\r\n');
    return socket.destroy();
  }

  try {
    const user = jwt.verify(token, JWT_SECRET);
    req.user = user;
    wss.handleUpgrade(req, socket, head, (ws) => {
      ws.user = user;
      wss.emit('connection', ws, req);
    });
  } catch (err) {
    console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω:', err.message);
    socket.write('HTTP/1.1 403 Forbidden\r\n\r\n');
    socket.destroy();
  }
});

/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∫–µ—Ç
 */
server.listen(SOCKET_PATH, () => {
  fs.chmodSync(SOCKET_PATH, 0o660);
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: ${SOCKET_PATH}`);
});
